import { promises as fs } from "node:fs";
import { join } from "node:path";
const { dev } = await (async () => {
  const { createRequire } = await import("node:module");
  const require = createRequire(import.meta.url);
  return require("astro"); // Node resolves package exports, no Vite alias
})();

let server: Awaited<ReturnType<typeof dev>> | undefined;

async function fileExists(p: string) {
  try {
    await fs.access(p);
    return true;
  } catch {
    return false;
  }
}

async function waitForContentLayer() {
  const root = process.cwd();
  const candidates = [
    // v5 content snapshot(s)
    join(root, ".astro", "data-store.json"), // older
    join(root, ".astro", "types.d.ts"), // generated by `astro sync`
    join(root, ".astro", "content", "db.sqlite"), // example if using a db file
    join(root, ".astro", "content.json") // fallback name some setups use
  ];

  const deadline = Date.now() + 15_000;
  // Fast path if any marker already exists
  if (await Promise.any(candidates.map(fileExists)).catch(() => false)) return;

  // Poll until one shows up
  while (Date.now() < deadline) {
    for (const p of candidates) {
      if (await fileExists(p)) return;
    }
    await new Promise((r) => setTimeout(r, 200));
  }

  // No fail here, tests may still run
  console.warn("[global-setup] content layer not ready after 15s");
}

export async function setup() {
  console.log("[global-setup] starting Astro dev… cwd=", process.cwd());
  server = await dev({
    root: process.cwd(),
    mode: "test",
    logLevel: "silent"
  });

  await waitForContentLayer();

  console.log("[global-setup] content layer (likely) ready");
}

export async function teardown() {
  console.log("[global-setup] stopping Astro dev…");
  await server?.stop?.();
}
